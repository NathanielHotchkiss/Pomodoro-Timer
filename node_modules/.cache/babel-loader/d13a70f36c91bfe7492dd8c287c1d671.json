{"ast":null,"code":"var _jsxFileName = \"/Users/nathanielhotchkiss/Desktop/Projects/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Progress.js\";\nimport React from \"react\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\nexport default function Progress({\n  mode,\n  isTimerRunning,\n  timeRemaining,\n  isSessionActive,\n  focusDuration,\n  breakDuration\n}) {\n  let currentDuration = mode === \"focus\" ? focusDuration : breakDuration;\n  let percent = (1 - timeRemaining / (currentDuration * 60)) * 100; // if session is false then we return null\n\n  if (!isSessionActive) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }\n  }, mode === \"focus\" ? `Focusing for ${minutesToDuration(focusDuration)} minutes` : `On Break for ${minutesToDuration(breakDuration)} minutes`), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  }, secondsToDuration(timeRemaining), \" remaining\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }, !isTimerRunning && isSessionActive ? \"PAUSED\" : null))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": percent // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${percent}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  })))));\n}","map":{"version":3,"sources":["/Users/nathanielhotchkiss/Desktop/Projects/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Progress.js"],"names":["React","minutesToDuration","secondsToDuration","Progress","mode","isTimerRunning","timeRemaining","isSessionActive","focusDuration","breakDuration","currentDuration","percent","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,mBAArD;AAEA,eAAe,SAASC,QAAT,CAAkB;AAC/BC,EAAAA,IAD+B;AAE/BC,EAAAA,cAF+B;AAG/BC,EAAAA,aAH+B;AAI/BC,EAAAA,eAJ+B;AAK/BC,EAAAA,aAL+B;AAM/BC,EAAAA;AAN+B,CAAlB,EAOZ;AACD,MAAIC,eAAe,GAAGN,IAAI,KAAK,OAAT,GAAmBI,aAAnB,GAAmCC,aAAzD;AACA,MAAIE,OAAO,GAAG,CAAC,IAAIL,aAAa,IAAII,eAAe,GAAG,EAAtB,CAAlB,IAA+C,GAA7D,CAFC,CAID;;AACA,MAAI,CAACH,eAAL,EAAsB;AACpB,WAAO,IAAP;AACD;;AACD,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,IAAI,KAAK,OAAT,GACI,gBAAeH,iBAAiB,CAACO,aAAD,CAAgB,UADpD,GAEI,gBAAeP,iBAAiB,CAACQ,aAAD,CAAgB,UAHvD,CAFF,eAQE;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,iBAAiB,CAACI,aAAD,CADpB,eARF,eAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,CAACD,cAAD,IAAmBE,eAAnB,GAAqC,QAArC,GAAgD,IAArD,CAXF,CADF,CAFF,eAiBE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEK,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAeD,OALjB,CAK0B;AAL1B;AAME,IAAA,KAAK,EAAE;AAAEE,MAAAA,KAAK,EAAG,GAAEF,OAAQ;AAApB,KANT,CAMmC;AANnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAjBF,CADF;AAkCD","sourcesContent":["import React from \"react\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\n\nexport default function Progress({\n  mode,\n  isTimerRunning,\n  timeRemaining,\n  isSessionActive,\n  focusDuration,\n  breakDuration,\n}) {\n  let currentDuration = mode === \"focus\" ? focusDuration : breakDuration;\n  let percent = (1 - timeRemaining / (currentDuration * 60)) * 100;\n\n  // if session is false then we return null\n  if (!isSessionActive) {\n    return null;\n  }\n  return (\n    <div>\n      {/* TODO: This area should show only when a focus or break session is running or pauses */}\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n          <h2 data-testid=\"session-title\">\n            {mode === \"focus\"\n              ? `Focusing for ${minutesToDuration(focusDuration)} minutes`\n              : `On Break for ${minutesToDuration(breakDuration)} minutes`}\n          </h2>\n          {/* TODO: Update message below to include time remaining in the current session */}\n          <p className=\"lead\" data-testid=\"session-sub-title\">\n            {secondsToDuration(timeRemaining)} remaining\n          </p>\n          <h3>{!isTimerRunning && isSessionActive ? \"PAUSED\" : null}</h3>\n        </div>\n      </div>\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          <div className=\"progress\" style={{ height: \"20px\" }}>\n            <div\n              className=\"progress-bar\"\n              role=\"progressbar\"\n              aria-valuemin=\"0\"\n              aria-valuemax=\"100\"\n              aria-valuenow={percent} // TODO: Increase aria-valuenow as elapsed time increases\n              style={{ width: `${percent}%` }} // TODO: Increase width % as elapsed time increases\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}